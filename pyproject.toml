[project]
name = "dinora"
version = "0.2.3"
description = "Dinora Chess Engine"
readme = "README.md"
keywords = ["chess", "uci", "ai", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: GPU :: NVIDIA CUDA",
    "Topic :: Games/Entertainment :: Board Games",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research"
]
requires-python = ">=3.10"
dependencies = [
    "cairosvg>=2.7.1",
    "chess>=1.10.0",
    "colorama>=0.4.6",
    "graphviz>=0.20.3",
    "lightning>=2.4.0",
    "numpy>=2.1.1",
    "onnxruntime-gpu>=1.19.2",
    "onnxruntime>=1.19.2",
    "pillow>=10.4.0",
    "pylru>=1.2.1",
    "tqdm>=4.66.5",
    "wandb>=0.18.1",
    "onnx>=1.17.0",
]


[project.optional-dependencies]
torch = [
    "torch>=2.4.1",
]

[tool.uv]
dev-dependencies = [
    "pre-commit>=3.8.0",
    "pytest >=8.1.1,<9",
    "pytest-cov>=5.0.0",
    "mypy>=1.11.2",
    "optuna>=4.2.1",
    "optuna-dashboard>=0.17.0",
    "snakeviz>=2.2.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
lint.select = [
    "E", "F", "I", "W", "E", "C", "PIE",
    "T20", "ISC", "A", "B", "S", "T10", "Q",
    "RSE", "RET", "SIM", "PTH", "ERA", "UP"
]
lint.ignore = [
    "E501", # line too long
    "B905", # zip() without an explicit strict= parameter
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PTH123", # open() should be replaced by Path.open()
    "ERA001", # Found commented-out code
    "S101", # assert: I use assert for mypy
    "W291", # trailing-whitespace: use black
    "T201", # print
    "T203", # pprint
    "RET505", # Unnecessary `elif` after `return` statement
    "RET504", # Unnecessary assignment to {name} before return statement
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "A003", # Class attribute {name} is shadowing a Python builtin
    "C417", # map
]
exclude = ["docs"]

[tool.mypy]
strict = true
ignore_missing_imports = true
plugins = [
    'numpy.typing.mypy_plugin'
]
exclude = [
    'docs',
    'tests',
    'trash',
]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning:wandb.analytics.sentry"
]
addopts = "-m 'not slow and not disk_usage'"
markers = [
    "slow: run pytorch / chess engine",
    "disk_usage: create big files / pollute your fs"
]
